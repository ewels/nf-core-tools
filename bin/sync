#!/usr/bin/env python

import json
import os
import requests
from requests.auth import HTTPBasicAuth
import sys
import syncutils.template
import syncutils.utils

# Set the default nf-core pipeline template branch
DEF_TEMPLATE_BRANCH = "TEMPLATE"
# The GitHub base url or the nf-core project
GH_BASE_URL = "https://{token}@github.com/nf-core/{pipeline}"
# The JSON file is updated on every push event on the nf-core GitHub project
NF_CORE_PIPELINE_INFO = "http://nf-co.re/pipelines.json"
# The API endpoint for creating pull requests
GITHUB_PR_URL_TEMPL = "https://api.github.com/repos/nf-core/{pipeline}/pulls"
# Current script dir
PATH_PARENT_DIR = os.path.dirname(os.path.realpath(__file__))



def create_pullrequest(pipeline, origin="dev", template="TEMPLATE", token="", user="nf-core"):
    """Create a pull request to a base branch (default: dev),
    from a head branch (default: TEMPLATE)

    Returns: An instance of class requests.Response
    """
    content = {}
    content['title'] = "Important pipeline nf-core update! (version {tag})".format(tag=os.environ['TRAVIS_TAG'])
    content['body'] = "Some important changes have been made in the nf-core pipelines templates.\n" \
    "Please make sure to merge this in ASAP and make a new minor release of your pipeline.\n\n" \
    "Follow the link [nf-core/tools](https://github.com/nf-core/tools/releases/tag/{})".format(os.environ['TRAVIS_TAG'])
    content['head'] = "{}".format(template)
    content['base'] = origin
    return requests.post(url=GITHUB_PR_URL_TEMPL.format(pipeline=pipeline),
                         data=json.dumps(content),
                         auth=HTTPBasicAuth(user, token))


def main():
    # Check that the commit event is a GitHub tag event
    assert os.environ['TRAVIS_TAG']
    assert os.environ['NF_CORE_BOT']

    # Catch exceptions in lists, and list them at the end
    sync_errors = []
    pr_errors = []

    # Get blacklisted pipelines, that should be excluded from sync
    with open(PATH_PARENT_DIR + "/blacklist.json") as fh:
        blacklist = json.load(fh)

    # Get nf-core pipelines info
    res = requests.get(NF_CORE_PIPELINE_INFO)
    pipelines = res.json().get('remote_workflows')
    if not pipelines:
        print("Pipeline information was empty!")

    pipelines_without_template = syncutils.utils.repos_without_template_branch(
        pipeline["name"] for pipeline in pipelines)

    # Exclude blacklisted pipelines
    pipelines = [pipeline for pipeline in pipelines if pipeline['name'] not in blacklist['pipelines']]

    # Update the template branch of each pipeline repo
    for pipeline in pipelines:
        print("Update template branch for pipeline '{pipeline}'... ".format(pipeline=pipeline['name']))
        try:
            syncutils.template.NfcoreTemplate(
                pipeline['name'],
                branch=DEF_TEMPLATE_BRANCH,
                repo_url=GH_BASE_URL.format(token=os.environ["NF_CORE_BOT"], pipeline=pipeline['name'])
            ).sync()
        except Exception as e:
            sync_errors.append((pipeline['name'], e))

    # Create a pull request from each template branch to the origin branch
    for pipeline in pipelines:
        print("Trying to open pull request for pipeline {}...".format(pipeline['name']))
        response = create_pullrequest(pipeline['name'], token=os.environ["NF_CORE_BOT"])
        if response.status_code != 201:
            pr_errors.append((pipeline['name'], response.status_code, response.content))
        else:
            print("Created pull-request for pipeline \'{pipeline}\' successfully."
                .format(pipeline=pipeline["name"]))

    for pipeline, exception in sync_errors:
        print("Sync for pipeline {name} failed.".format(name=pipeline))
        print(exception)

    for pipeline, return_code, content in pr_errors:
        print("Pull-request for pipeline \'{pipeline}\' failed,"
                " got return code {return_code}."
                .format(pipeline=pipeline, return_code=return_code))
        print(content)

    if pr_errors or sync_errors: sys.exit(1)

    sys.exit(0)


if __name__ == "__main__":
    main()
